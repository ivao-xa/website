@page "/discord"
@using Data
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NavManager
@inject DiscordService DiscordSrv
@inject IDbContextFactory<WebsiteContext> ContextFactory
@inject IvaoApiService Api

<Authenticated RequiredRoles="DiscordRoles.Administrator">
	<Staff>
		<div class="d-flex flex-column w-100 mt-2">
			<div class="m-auto d-flex flex-column">
				<span class="text-center">PM Management</span>
				<div class="d-flex flex-row">
					<button class="btn btn-primary m-2" @onclick="() => Ping(context)">Ping Me!</button>
					<button class="btn btn-danger m-2" @onclick="() => ClearAsync(context)">Clear Chat</button>
				</div>
			</div>

			<div class="m-auto d-flex flex-column">
				<span class="text-center">Server Management</span>
				<div class="d-flex flex-row">
					<button class="btn @(enforcing ? "btn-disabled" : "btn-success") m-2" @onclick="EnforceRoles">Enforce ALL Roles</button>
					<button class="btn @(enforcing ? "btn-disabled" : "btn-success") m-2" @onclick="EnforceConfig">Enforce Server Configuration</button>
				</div>
			</div>

			<div class="m-auto w-100 h-auto d-flex flex-column">
				<span class="text-center">Roles</span>
				<textarea rows="10" class="m-2" @bind="roleConfig"></textarea>
			</div>

			<div class="m-auto w-100 h-auto d-flex flex-column">
				<span class="text-center">Channels</span>
				<textarea rows="50" class="m-2" @bind="channelConfig"></textarea>
			</div>
		</div>
	</Staff>
	<Unauthorized>
		@{
			NavManager.NavigateTo("/");
		}
	</Unauthorized>
</Authenticated>

@code {
	private void Ping(User? user)
	{
		if (user is null || user.Snowflake is null)
			return;

		_ = DiscordSrv.SendMessageAsync(user, "Hi!", 5000);
	}

	private async Task ClearAsync(User? user)
	{
		if (user is null || user.Snowflake is null)
			return;

		var dcuser = DiscordSrv._client.GetUser(user.Snowflake.Value);

		if (dcuser is null)
		{
			DiscordSrv._client.PurgeUserCache();
			await DiscordSrv._client.DownloadUsersAsync(DiscordSrv._client.Guilds);
			await ClearAsync(user);
			return;
		}

		var dmc = await dcuser.CreateDMChannelAsync();
		foreach (var msg in await dmc.GetMessagesAsync().FirstAsync())
			await dmc.DeleteMessageAsync(msg);
	}

	private bool enforcing = false;
	private void EnforceRoles()
	{
		if (enforcing)
			return;

		enforcing = true;

		_ = Task.Run(async () =>
		{
			await DiscordSrv.EnforceAllRolesAsync(ContextFactory.CreateDbContext(), Api);
			enforcing = false;
			await InvokeAsync(StateHasChanged);
		});
	}

	private void EnforceConfig()
	{
		if (enforcing)
			return;

		enforcing = true;

		_ = Task.Run(async () =>
		{
			await DiscordSrv.EnforceDiscordConfigAsync();
			enforcing = false;
			await InvokeAsync(StateHasChanged);
		});
	}

	private string channelConfig
	{
		get => File.ReadAllText(DiscordService.CHANNEL_CONF_PATH);
		set => _ = File.WriteAllTextAsync(DiscordService.CHANNEL_CONF_PATH, value);
	}

	private string roleConfig
	{
		get => File.ReadAllText(DiscordService.ROLE_CONF_PATH);
		set => _ = File.WriteAllTextAsync(DiscordService.ROLE_CONF_PATH, value);
	}
}