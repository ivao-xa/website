@page "/roster"
@page "/atc"
@page "/controller"
@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject IvaoApiService Api
@inject IDbContextFactory<WebsiteContext> ContextFactory

<div class="container-fluid mt-3">
    <h2 class="text-center">ATC Roster</h2>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">VID</th>
                <Authenticated>
                    <th scope="col">Name</th>
                </Authenticated>
                <th scope="col">Status</th>
                <th scope="col" class="text-center">Rating</th>
                <th scope="col">FAA</th>
                <th scope="col">NavCan</th>
                <th scope="col">Endorsements</th>
            </tr>
        </thead>
        <tbody>
            <Authenticated>
                <ChildContent>
                    @foreach (User user in (string.IsNullOrWhiteSpace(context.Staff) ? _users?.Where(u => u.LastControlTime >= minControlTime) : _users) ?? Array.Empty<User>())
                    {
                        <ControllerRosterRow user="user" AuthenticationContext="context" Fras="_fras" CheckoutChanged="(_, _) => _ = UpdateUsersAsync()" />
                    }
                </ChildContent>
                <Loading>
                    @foreach (User user in _users?.Where(u => u.LastControlTime >= minControlTime) ?? Array.Empty<User>())
                    {
                        <ControllerRosterRow user="user" AuthenticationContext="null" Fras="_fras" />
                    }
                </Loading>
            </Authenticated>
        </tbody>
    </table>
</div>

@code {
    private User[]? _users = null;
    private Dictionary<int, Dictionary<string, bool>> _fras = new();
    private DateTime minControlTime = DateTime.UtcNow - TimeSpan.FromDays(90);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        foreach (Fra fra in await Api.GetFrasAsync(vidBased: true, ratingBased: false) ?? new())
        {
            if (fra.userId is null)
                continue;

            int vid = fra.userId.Value;

            if (!_fras.ContainsKey(vid))
                _fras.Add(vid, new());

            bool isPerpetual =
                fra.active && fra.daySun && fra.dayMon && fra.dayTue &&
                fra.dayWed && fra.dayThu && fra.dayFri && fra.daySat &&
                fra.startTime == "00:00:00" && fra.endTime == "00:00:00";

            string formatPosition =
                fra.atcPosition is not null
                ? $"{fra.atcPosition.airportId} {fra.atcPosition.position}"
                : $"{fra.subcenter!.centerId[1..]} {fra.subcenter.position}";

            _fras[vid].TryAdd(formatPosition, isPerpetual);
        }

        await UpdateUsersAsync();
    }

    private async Task UpdateUsersAsync()
    {
        var allUsers = (await ContextFactory.CreateDbContextAsync()).Users.AsNoTracking().ToArray();
        _users = allUsers.OrderByDescending(u => u.LastControlTime).ToArray();
        StateHasChanged();
    }
}