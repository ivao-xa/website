@page "/roster"
@page "/atc"
@page "/controller"
@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject IvaoApiService Api
@inject IDbContextFactory<WebsiteContext> ContextFactory

<div class="container-fluid mt-3">
    <h2 class="text-center">ATC Roster</h2>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">VID</th>
                <Authenticated>
                    <th scope="col">Name</th>
                </Authenticated>
                <th scope="col">Status</th>
                <th scope="col">Rating</th>
                <th scope="col">FAA</th>
                <th scope="col">NavCan</th>
                <th scope="col">Endorsements</th>
            </tr>
        </thead>
        <tbody>
            @foreach (User user in _users ?? Array.Empty<User>())
            {
                <tr class="align-middle @(user.LastControlTime < DateTime.UtcNow - TimeSpan.FromDays(30) ? "table-secondary" : string.Empty)">
                    <th scope="row"><a href="https://ivao.aero/member?ID=@(user.Vid)" class="link-dark" style="text-decoration-line: none;">@user.Vid</a></th>
                    <Authenticated>
                        <td>@user.FirstName @user.LastName</td>
                    </Authenticated>
                    <td><img src="https://status.ivao.aero/R/@(user.Vid).png" title="@user.Vid" /></td>
                    <td><img src="https://ivao.aero/data/images/ratings/atc/@((int)user.RatingAtc!.Value).gif" title="@user.RatingAtc" /></td>
                    <td>
                        <div class="d-flex flex-row">
                            <Authenticated RequiredRoles="DiscordRoles.Training">
                                <button type="button" class="btn btn-@(user.FaaChecked ? "success" : "danger") btn-sm m-1 col" @onclick="() => CheckoutAsync(user, false)">FAA</button>
                            </Authenticated>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.AS1, AtcRating.AS3, false)">DEL/GND</button>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.AS2, AtcRating.ADC, false)">TWR</button>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.ADC, AtcRating.APC, false)">APP/DEP</button>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.APC, AtcRating.ACC, false)">CTR</button>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex flex-row">
                            <Authenticated RequiredRoles="DiscordRoles.Training">
                                <button type="button" class="btn btn-@(user.NavCanChecked ? "success" : "danger") btn-sm m-1 col" @onclick="() => CheckoutAsync(user, true)">NavCan</button>
                            </Authenticated>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.AS1, AtcRating.AS3, true)">DEL/GND</button>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.AS2, AtcRating.ADC, true)">TWR</button>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.ADC, AtcRating.APC, true)">APP/DEP</button>
                            <button type="button" class="@GetButtonClasses(user, AtcRating.APC, AtcRating.ACC, true)">CTR</button>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex flex-row">
                            @if (_fras.TryGetValue(user.Vid, out var endorsements))
                            {
                                @foreach (var endorsement in endorsements)
                                {
                                    <span class="badge rounded-pill bg-@(endorsement.Value ? "dark" : "primary") m-1">@endorsement.Key</span>
                                }
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private User[]? _users = null;
    private Dictionary<int, Dictionary<string, bool>> _fras = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_users is not null)
            return;

        foreach (Fra fra in await Api.GetFrasAsync(vidBased: true, ratingBased: false) ?? new())
        {
            if (fra.userId is null)
                continue;

            int vid = fra.userId.Value;

            if (!_fras.ContainsKey(vid))
                _fras.Add(vid, new());

            bool isPerpetual =
                fra.active && fra.daySun && fra.dayMon && fra.dayTue &&
                fra.dayWed && fra.dayThu && fra.dayFri && fra.daySat &&
                fra.startTime == "00:00:00" && fra.endTime == "00:00:00";

            string formatPosition =
                fra.atcPosition is not null
                ? $"{fra.atcPosition.airportId} {fra.atcPosition.position}"
                : $"{fra.subcenter!.centerId[1..]} {fra.subcenter.position}";

            _fras[vid].TryAdd(formatPosition, isPerpetual);
        }

        UpdateUsers(await ContextFactory.CreateDbContextAsync());
    }

    private void UpdateUsers(WebsiteContext context)
    {
        var minControlTime = DateTime.UtcNow - TimeSpan.FromDays(90);
        var allUsers = context.Users.AsNoTracking().ToArray();
        _users = allUsers.Where(u => u.RatingAtc is not null).OrderByDescending(u => u.LastControlTime).ToArray();
        StateHasChanged();
    }

    private string GetButtonClasses(User user, AtcRating trainingRating, AtcRating completeRating, bool canada) =>
        ((!canada && !user.FaaChecked) || (canada && !user.NavCanChecked) || (user.RatingAtc < trainingRating))
        ? "btn btn-outline-secondary btn-sm m-1 col"
        : user.RatingAtc >= completeRating
          ? "btn btn-success btn-sm m-1 col"
          : "btn btn-info btn-sm m-1 col";

    private async Task CheckoutAsync(User? user, bool canada)
    {
        var context = await ContextFactory.CreateDbContextAsync();
        user = await context.Users.FindAsync(user?.Vid ?? 0);
        if (user is null)
            return;

        if (canada)
            user.NavCanChecked = !user.NavCanChecked;
        else
            user.FaaChecked = !user.FaaChecked;

        await context.SaveChangesAsync();
        UpdateUsers(context);
    }
}