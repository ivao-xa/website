@page "/ocms"
@layout OcmsLayout
@using System.Text.RegularExpressions;
@using Website.Data.Ocms;
@using Website.Data;
@using Website.Shared.OCMS;
@using FlightStrip = Website.Shared.OCMS.FlightStrip
@using Strip = Website.Data.Ocms.FlightStrip
@inject OccStrips OccStrips
@inject Website.Data.WhazzupService Whazzup

<OccAuthenticated>
	<div class="row my-3">
		<div class="col" />
		<div class="text-center text-bg-success p-1 rounded fs-4 col-1" style="background-color: #38808A;">@(new Time(DateTime.UtcNow.Hour, DateTime.UtcNow.Minute))z</div>
		<div class="col-1" />
		<div class="text-center text-bg-@(CheckAuthed(context) ? "warning" : "danger") p-1 rounded fs-4 col-1">@(GetAuthed(context)?.Callsign ?? "Not Connected")</div>
		<div class="col" />
	</div>

	<div class="d-flex flex-row mb-3 justify-content-evenly">
		<div class="d-flex flex-column eastbound">
			<div class="d-flex flex-row gap-2 justify-content-center">
				<div class="status big color-east" />
				<b class="text-bg-dark">Eastbound</b>
			</div>
			@for (char track = 'Z'; track >= 'M'; --track)
			{
				if (!OccStrips.Strips.Any(s => s.Track == track))
					continue;

				<div class="d-flex flex-column track mx-3 mt-2">
					<div class="mt-2 mb-0 ms-2 d-flex flex-row justify-content-start gap-2">
						<div class="status color-east" />
						<span>TRACK @track</span>
					</div>
					@foreach (var strip in OccStrips.Strips.Where(s => s.Track == track).OrderBy(s => s.Callsign))
					{
						<FlightStrip Strip="@strip" OccStrips="@OccStrips" LastUpdate="GetLastTrack(strip.Callsign)" StripUpdated="StripChanged" SetSelected="fs => { _selectedFlightStrip = fs; StateHasChanged(); }" Authenticated="CheckAuthed(context)" />
					}
				</div>
			}

			<div class="d-flex flex-column track mx-3 my-4">
				<div class="mt-2 mb-0 ms-2 d-flex flex-row justify-content-start gap-2">
					<div class="status color-east" />
					<span>RANDOM ROUTES</span>
				</div>
				@foreach (var strip in OccStrips.Strips.Where(s => s.Track is null).OrderBy(s => s.Callsign))
				{
					<FlightStrip Strip="@strip" OccStrips="@OccStrips" LastUpdate="GetLastTrack(strip.Callsign)" StripUpdated="StripChanged" SetSelected="fs => { _selectedFlightStrip = fs; StateHasChanged(); }" Authenticated="CheckAuthed(context)" />
				}
			</div>
			<div class="flex-fill" />
		</div>

		<div class="d-flex flex-column westbound">
			<div class="d-flex flex-row gap-2 justify-content-center">
				<div class="status big color-west" />
				<b class="text-bg-dark">Westbound</b>
			</div>
			@for (char track = 'A'; track <= 'N'; ++track)
			{
				if (!OccStrips.Strips.Any(s => s.Track == track))
					continue;

				<div class="d-flex flex-column track mx-3 mt-2">
					<div class="mt-2 mb-0 ms-2 d-flex flex-row justify-content-start gap-2">
						<div class="status color-west" />
						<span>TRACK @track</span>
					</div>
					@foreach (var strip in OccStrips.Strips.Where(s => s.Track == track).OrderBy(s => s.Callsign))
					{
						<FlightStrip Strip="@strip" OccStrips="@OccStrips" LastUpdate="GetLastTrack(strip.Callsign)" StripUpdated="StripChanged" SetSelected="fs => { _selectedFlightStrip = fs; StateHasChanged(); }" Authenticated="CheckAuthed(context)" />
					}
				</div>
			}

			<div class="d-flex flex-column track mx-3 my-4">
				<div class="mt-2 mb-0 ms-2 d-flex flex-row justify-content-start gap-2">
					<div class="status color-west" />
					<span>RANDOM ROUTES</span>
				</div>
				@foreach (var strip in OccStrips.Strips.Where(s => s.Track is null).OrderBy(s => s.Callsign))
				{
					<FlightStrip Strip="@strip" OccStrips="@OccStrips" LastUpdate="GetLastTrack(strip.Callsign)" StripUpdated="StripChanged" SetSelected="fs => { _selectedFlightStrip = fs; StateHasChanged(); }" Authenticated="CheckAuthed(context)" />
				}
			</div>
			<div class="flex-fill" />
		</div>
	</div>

	<div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasFlightstrip" aria-labelledby="offcanvasFlightstripLabel">
		@if (_selectedFlightStrip is Strip selected)
		{
			<div class="offcanvas-header">
				<h5 class="offcanvas-title" id="offcanvasFlightstripLabel">
					Routing: @selected.Callsign
					<a href="@GetSkyVectorUrl(string.Join(" ", selected.Route.Select(i => i.Fix)))" target="_blank" class="btn btn-primary">SkyVector</a>
					<a class="btn btn-primary" href="https://webeye.ivao.aero/?pilotId=@selected.Callsign" target="_blank">Webeye</a>
				</h5>
				<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
			</div>
			<div class="offcanvas-body d-flex flex-column flex-fill">
				<input @bind="SelectedRoute" disabled="@(!CheckAuthed(context) || _selectedFlightStrip is null)" />
			</div>
		}
	</div>
</OccAuthenticated>

@code {
	private Strip? _selectedFlightStrip = null;
	private Dictionary<string, PilotTrack>? _pilotTracks;

	private string? SelectedRoute
	{
		get => _selectedFlightStrip?.Route?.ToString();

		set
		{
			if (_selectedFlightStrip is null || string.IsNullOrWhiteSpace(value))
				return;

			_selectedFlightStrip.Route = _selectedFlightStrip.Route.GetAltered(value.Split());
			StripChanged(_selectedFlightStrip);
		}
	}

	private PilotTrack? GetLastTrack(string callsign) => _pilotTracks is not null && _pilotTracks.TryGetValue(callsign, out PilotTrack pt) ? pt : null;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		var pilotTrackPairs =
			(await Whazzup.GetFeedAsync())?.Clients.Pilots
				.Where(p => p.LastTrack is not null)
				.Select(p => new KeyValuePair<string, PilotTrack>(p.Callsign.ToUpperInvariant(), p.LastTrack!.Value));

		if (pilotTrackPairs is not null)
			_pilotTracks = new(pilotTrackPairs);

		if (!firstRender)
			return;

		OccStrips.StripsUpdated += (_, _) => InvokeAsync(StateHasChanged);
		Whazzup.AtcConnected += _ => InvokeAsync(StateHasChanged);
		Whazzup.AtcDisconnected += _ => InvokeAsync(StateHasChanged);
	}

	private readonly static Regex skyvectorWholeCoordRegex = new(@"(\d\d)/(\d\d)", RegexOptions.Compiled);
	private readonly static Regex skyvectorHalfCoordRegex = new(@"(\d\d)30/(\d\d)", RegexOptions.Compiled);

	private string GetSkyVectorUrl(string route)
	{
		route = skyvectorHalfCoordRegex.Replace(route, "N$1$2");
		route = skyvectorWholeCoordRegex.Replace(route, "$1$2N");

		return $"https://skyvector.com/?ll=54,-30&chart=304&zoom=10&fpl={System.Web.HttpUtility.UrlEncode(route)}";
	}

	private async void StripChanged(Strip changedStrip)
	{
		if (changedStrip.Route.Modified)
			OccStrips.ModifyStrip(changedStrip);
		else
			OccStrips.ResetStrip(changedStrip.Callsign);

		await InvokeAsync(StateHasChanged);
	}

	private bool CheckAuthed(User user) =>
		Whazzup.ConnectedControllers.Where(atc => atc.Callsign.StartsWith("CZQX") || atc.Callsign.StartsWith("EGGX") || atc.Callsign.StartsWith("KZWY")).Any(atc => atc.UserId == user.Vid);


	private ATC? GetAuthed(User user) =>
		Whazzup.ConnectedControllers.FirstOrDefault(atc => atc.UserId == user.Vid);
}