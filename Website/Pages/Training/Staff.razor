@page "/training"
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions;
@using Website.Data
@inject IDbContextFactory<WebsiteContext> ContextFactory
@inject IvaoApiService Api
@inject NavigationManager NavManager
@inject DiscordService Discord

<Authenticated RequiredRoles="DiscordRoles.Training">
	<Staff>
		<div class="d-flex flex-column w-100">
			@{
				var scheduledItems = GetExams();
			}
			<h1 class="text-center">Exams</h1>
			<table class="table w-100">
				<thead>
					<tr class="head">
						<th scope="col">Trainer</th>
						<th scope="col">Trainee</th>
						<th scope="col">Details</th>
						<th scope="col">Time</th>
						<th scope="col">Edit</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var (exam, examinee) in scheduledItems.Where(e => !e.Exam.Mock))
					{
						<tr class="align-middle">
							<td>
								<select @onchange="v => SetExaminer(exam.Id, int.Parse(v.Value?.ToString()!))">
									@foreach (var trainer in GetTrainers())
									{
										@if (exam.Trainer == trainer.Vid)
										{
											<option value="@trainer.Vid" selected>@trainer.Name - Current</option>
										}
										else
										{
											<option value="@trainer.Vid">@trainer.Name</option>
										}
									}
								</select>
							</td>
							<td>
								<a href="https://ivao.aero/Member.aspx?Id=@(exam.Trainee)" target="_blank">
									@(examinee?.ToString() ?? exam.Trainee.ToString())
								</a>
							</td>
							<td>
								@exam.Name
							</td>
							<td>
								<i class="oi oi-pencil" href="@($"/exam/{exam.Id}")"/>
							</td>
						</tr>
					}
				</tbody>
			</table>

			<h1 class="text-center">Trainings</h1>
			<table class="table w-100">
				<thead>
					<tr class="head">
						<th scope="col">Trainer</th>
						<th scope="col">Trainee</th>
						<th scope="col">Details</th>
						<th scope="col">Time</th>
						<th scope="col">Edit</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var (exam, examinee) in scheduledItems.Where(e => e.Exam.Mock))
					{
						<tr class="align-middle">
							<td>
								<select @onchange="v => SetExaminer(exam.Id, int.Parse(v.Value?.ToString()!))">
									@foreach (var trainer in GetTrainers())
									{
										@if (exam.Trainer == trainer.Vid)
										{
											<option value="@trainer.Vid" selected>@trainer.Name - Current</option>
										}
										else
										{
											<option value="@trainer.Vid">@trainer.Name</option>
										}
									}
								</select>
							</td>
							<td>
								<a href="https://ivao.aero/Member.aspx?Id=@(exam.Trainee)" target="_blank">
									@(examinee?.ToString() ?? exam.Trainee.ToString())
								</a>
							</td>
							<td>
								@exam.Name
							</td>
							<td>
								<i class="oi oi-pencil" href="@($"/exam/{exam.Id}")" />
							</td>
						</tr>
					}
				</tbody>
			</table>

			<h1 class="text-center">Requests</h1>
			<table class="table w-100">
				<thead>
					<tr class="head">
						<th scope="col">Trainer</th>
						<th scope="col">Trainee</th>
						<th scope="col">Rating</th>
						<th scope="col">Progress</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var (training, trainee) in GetTrainings())
					{
						<tr class="align-middle">
							<td>
								<select @onchange="v => SetTrainer(training.Id, int.Parse(v.Value?.ToString()!))">
									@foreach (var trainer in GetTrainers())
									{
										@if (training.Trainer == trainer.Vid)
										{
											<option value="@trainer.Vid" selected>@trainer.Name - Current</option>
										}
										else
										{
											<option value="@trainer.Vid">@trainer.Name</option>
										}
									}
								</select>
							</td>
							<td>
								<a href="https://ivao.aero/Member.aspx?Id=@(training.Trainee)" target="_blank">
									@(trainee?.ToString() ?? training.Trainee.ToString())
								</a>
							</td>
							<td><img src="https://ivao.aero/data/images/ratings/atc/@(((int?)training.AtcRating ?? (int?)training.PilotRating)!.Value).gif" title="@(training.AtcRating is null ? Enum.GetName(training.PilotRating!.Value) : Enum.GetName(training.AtcRating!.Value))"></td>
							<td>
								@if (GetTrainingPercentage(training) == 100)
								{
									<div class="input-group">
										<div class="text-center form-control p-0" style="background-color: #f1f1f1;">
											<div style="background-color: #4caf50; width: @GetTrainingPercentage(training)%">@GetTrainingPercentage(training)%</div>
										</div>
										<button class="btn btn-danger py-0" @onclick="_ => Delete(training)"><i class="oi oi-trash" /></button>
									</div>
								}
								else
								{
									<div class="text-center" style="background-color: #f1f1f1;">
										<div style="background-color: #4caf50; width: @GetTrainingPercentage(training)%">@GetTrainingPercentage(training)%</div>
									</div>
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</Staff>
	<Unauthorized>
		@{
			NavManager.NavigateTo("/", replace: true);
		}
	</Unauthorized>
</Authenticated>

@code {
	private IEnumerable<(TrainingRequest Request, User? Trainee)> GetTrainings()
	{
		var context = ContextFactory.CreateDbContext();
		return context.TrainingRequests.AsNoTracking().ToArray().Select(req => (req, context.Users.Find(req.Trainee)));
	}

	private IEnumerable<(Exam Exam, User? Trainee)> GetExams()
	{
		var context = ContextFactory.CreateDbContext();
		return context.Exams.AsNoTracking().ToArray().Select(exam => (exam, context.Users.Find(exam.Trainee)));
	}

	private IEnumerable<User> GetTrainers()
	{
		var context = ContextFactory.CreateDbContext();
		return context.Users.Where(u => u.Roles.HasFlag(DiscordRoles.Training)).AsNoTracking();
	}

	private void SetExaminer(int id, int trainer)
	{
		var context = ContextFactory.CreateDbContext();
		Exam? exam = context.Exams.Find(id);
		if (exam is not null)
		{
			exam.Trainer = trainer;
			context.SaveChanges();
		}
	}

	private void SetTrainer(int id, int trainer)
	{
		var context = ContextFactory.CreateDbContext();
		TrainingRequest? req = context.TrainingRequests.Find(id);
		if (req is not null)
		{
			req.Trainer = trainer;

			if (string.IsNullOrWhiteSpace(req.Comments))
				req.Comments = "2/10";

			context.SaveChanges();
		}
	}

	private readonly Regex _trainingComment = new(@"(\d+)/(\d+)", RegexOptions.Compiled | RegexOptions.CultureInvariant);
	private int GetTrainingPercentage(TrainingRequest req)
	{
		string comment = req.Comments.Split('\n')[0];
		var match = _trainingComment.Match(comment);

		if (!match.Success)
			return 25;

		int num = int.Parse(match.Groups[1].Value),
			denom = int.Parse(match.Groups[2].Value);

		return denom > 0 ? num * 100 / denom : 100;
	}

	private async void Delete(TrainingRequest req)
	{
		var context = await ContextFactory.CreateDbContextAsync();
		context.TrainingRequests.Remove(req);
		await context.SaveChangesAsync();
		_ = Discord.UpdateTrainingChannelsAsync(context);
		await InvokeAsync(StateHasChanged);
	}
}