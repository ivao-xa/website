@page "/event/edit"
@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject IDbContextFactory<WebsiteContext> ContextFactory

<Authenticated RequiredRoles="DiscordRoles.Events">
	<Staff>
		@if (Event is not null)
		{
			<div class="container my-4 d-flex flex-column">
				<div class="form">
					<div class="mb-3 row">
						<div class="col-auto"><label for="eventName" class="form-label">Event Name</label></div>
						<div class="col-auto flex-grow-1"><input type="text" class="form-control" name="eventName" @bind="Event.Name" @bind:after="StateHasChanged" /></div>
					</div>
					<div class="mb-3 row">
						<div class="col-auto"><label for="eventBanner" class="form-label">Banner URL</label></div>
						<div class="col-auto flex-grow-1"><input type="text" class="form-control" name="eventBanner" @bind="Event.BannerUrl" @bind:after="StateHasChanged" /></div>
					</div>
					<div class="mb-3 row">
						<div class="col-auto"><label for="eventForum" class="form-label">Forum URL</label></div>
						<div class="col-auto flex-grow-1"><input type="text" class="form-control" name="eventForum" @bind="Event.ForumUrl" @bind:after="StateHasChanged" /></div>
					</div>
					<div class="mb-3 row">
						<div class="col-auto"><label for="eventStart" class="form-label">Start</label></div>
						<div class="col-auto flex-grow-1"><input type="datetime-local" class="form-control" name="eventStart" @bind="Event.Start" @bind:after="StateHasChanged" /></div>
					</div>
					<div class="mb-3 row">
						<div class="col-auto"><label for="eventEnd" class="form-label">End</label></div>
						<div class="col-auto flex-grow-1"><input type="datetime-local" class="form-control" name="eventEnd" @bind="Event.End" @bind:after="StateHasChanged" /></div>
					</div>
					<div class="mb-3 row">
						<div class="col-auto"><label for="eventPositions" class="form-label">Positions</label></div>
						<div class="col-auto flex-grow-1"><textarea type="text" class="form-control" name="eventPositions" @bind="PositionsStr" @bind:event="oninput" @bind:after="StateHasChanged" /></div>
					</div>

					<button class="btn btn-primary" @onclick="_ => EventChangedAsync()">Save</button>
				</div>
				<EventCalendar Event="Event" />
			</div>
		}
		else
		{
			<span>Event not found</span>
		}
	</Staff>
	<Unauthorized>
		<span>Contact a member of the events team to edit this event.</span>
	</Unauthorized>
	<Loading>
		<span>Loading event from database&hellip;</span>
	</Loading>
</Authenticated>

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "id")]
	public int? EventId { get; set; } = null;

#pragma warning disable CS8618
	[Parameter]
	public Event Event { get; set; }
#pragma warning restore CS8618

	string PositionsStr
	{
		get => string.Join(' ', Event?.Positions ?? Array.Empty<string>());
		set
		{
			Event.Positions = value.Split();
			StateHasChanged();
		}
	}

	override protected async Task OnParametersSetAsync()
	{
		var context = await ContextFactory.CreateDbContextAsync();
		Event = context.Events.Find(EventId) ?? new();
	}

	async Task EventChangedAsync()
	{
		var context = await ContextFactory.CreateDbContextAsync();
		if (context.Events.Any(e => e.Id == Event.Id))
			context.Events.Update(Event);
		else
			await context.Events.AddAsync(Event);

		await context.SaveChangesAsync();
		await InvokeAsync(StateHasChanged);
	}
}