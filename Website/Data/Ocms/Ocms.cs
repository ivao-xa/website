using System.Diagnostics.CodeAnalysis;
using System.Text.RegularExpressions;

namespace Website.Data.Ocms;

public class FlightStrip
{
	public string Callsign { get; init; }
	public string Type { get; init; }
	public string? Selcal { get; init; } = null;

	public Route Route { get; set; } = new();
	public char? Track
	{
		get => _track ?? Route.Fixes.FirstOrDefault(f => f.Length == 4 && f.StartsWith("NAT", StringComparison.InvariantCultureIgnoreCase))?.Last();
		set => _track = value;
	}
	private char? _track;

	public int FlightLevel { get; set; }
	public decimal Speed { get; set; }

	public FlightStrip(string callsign, string type, int flightLevel, decimal speed)
	{
		Callsign = callsign;
		Type = type;
		FlightLevel = flightLevel;
		Speed = speed;
	}

	/// <summary>Copy constructor.</summary>
	/// <param name="other">The strip to copy.</param>
	public FlightStrip(FlightStrip other) : this(other.Callsign, other.Type, other.FlightLevel, other.Speed)
	{
		Selcal = other.Selcal;
		Route = new(other.Route);
	}

	public static bool operator ==(FlightStrip left, FlightStrip right) =>
		left.GetHashCode() == right.GetHashCode() &&
		left.Route == right.Route;

	public static bool operator !=(FlightStrip left, FlightStrip right) =>
		!(left == right);

	public override int GetHashCode() => (Callsign, Type, Selcal, Track, FlightLevel, Speed).GetHashCode();

	public override bool Equals(object? obj)
	{
		if (obj is not FlightStrip fs)
			return false;

		return this == fs;
	}
}

public record class Time(int Hours, int Minutes)
{
	public Time(string zuluTime) : this(0, 0)
	{
		if (zuluTime.Length is < 2 or > 5
		 || zuluTime.Length == 5 && char.ToLowerInvariant(zuluTime[^1]) != 'z'
		 || !int.TryParse(zuluTime[..2], out int hour) || hour is < 0 or >= 24
		 || !int.TryParse("0" + zuluTime[2..], out int min) || min is < 0 or >= 60)
			throw new ArgumentException("Invalid time", nameof(zuluTime));

		Hours = hour; Minutes = min;
	}

	public static bool TryParse(string zuluTime, [NotNullWhen(true)] out Time? result)
	{
		try
		{
			result = new Time(zuluTime);
			return true;
		}
		catch 
		{ 
			result = null;
			return false;
		}
	}

	public override string ToString() => $"{Hours:00}{Minutes:00}";
}

public partial class OccStrips : IDisposable
{
	private static readonly Dictionary<string, (decimal Latitude, decimal Longitude)> FIXES = new() {
		{ "ABAGU", (52.503333333333333333333333333m, -7.6466666666666666666666666667m) },
		{ "ABDOX", (53.288027777777777777777777778m, -6.1546666666666666666666666667m) },
		{ "ABIDO", (52.478805555555555555555555556m, -5.7955833333333333333333333333m) },
		{ "ADARA", (51.5m, -15m) },
		{ "ADARU", (52.593833333333333333333333333m, -8.930944444444444444444444444m) },
		{ "ADBUS", (54.416666666666666666666666667m, -12.5m) },
		{ "ADMUP", (52.8m, -6.2333333333333333333333333333m) },
		{ "ADNAL", (53.698305555555555555555555556m, -6.5948611111111111111111111111m) },
		{ "ADODO", (58.5m, -10m) },
		{ "ADSIS", (53.684194444444444444444444444m, -5.6594444444444444444444444444m) },
		{ "ADVAT", (45m, -9.469722222222222222222222222m) },
		{ "AGINI", (53.155527777777777777777777778m, -8.579472222222222222222222222m) },
		{ "AGORI", (57m, -13m) },
		{ "AKIGO", (53.841666666666666666666666667m, -7.934722222222222222222222222m) },
		{ "AKIVA", (53.648888888888888888888888889m, -6.4526666666666666666666666667m) },
		{ "ALLRY", (50.5m, -52m) },
		{ "AMDEP", (51.566666666666666666666666667m, -11.216666666666666666666666667m) },
		{ "AMDIL", (53.257027777777777777777777778m, -5.9815m) },
		{ "AMLAD", (56.264444444444444444444444444m, -10m) },
		{ "AMTAP", (58.373722222222222222222222222m, -9.5m) },
		{ "APRUT", (53.696944444444444444444444444m, -6.7596944444444444444444444444m) },
		{ "APSOV", (55.823055555555555555555555556m, -10m) },
		{ "ARKIL", (50.657777777777777777777777778m, -8m) },
		{ "ARVOK", (53.155277777777777777777777778m, -6.05975m) },
		{ "ASDER", (53.562972222222222222222222222m, -6.374m) },
		{ "ASGON", (52.598444444444444444444444444m, -9.143916666666666666666666667m) },
		{ "ASKUP", (53.8925m, -6.1088888888888888888888888889m) },
		{ "ATFOR", (54.26m, -8.27875m) },
		{ "ATLAM", (51.644666666666666666666666667m, -8.375361111111111111111111111m) },
		{ "ATSIX", (60m, -10m) },
		{ "ATSUR", (50m, -14m) },
		{ "AVPUT", (65.033333333333333333333333333m, -60m) },
		{ "AVUTI", (57.466666666666666666666666667m, -58m) },
		{ "AYROU", (65.315002777777777777777777778m, -64m) },
		{ "BA113", (53.354455555555555555555555556m, -6.7483583333333333333333333333m) },
		{ "BABON", (53.217583333333333333333333333m, -6.5156944444444444444444444444m) },
		{ "BADEN", (51.781861111111111111111111111m, -8.6815m) },
		{ "BAFBI", (54.297444444444444444444444444m, -8.760611111111111111111111111m) },
		{ "BAGSO", (53.68m, -5.5m) },
		{ "BAKBA", (53.685555555555555555555555556m, -8.312611111111111111111111111m) },
		{ "BAKOT", (52.169527777777777777777777778m, -9.84825m) },
		{ "BAKUR", (52.241666666666666666666666667m, -5.6802777777777777777777777778m) },
		{ "BALIX", (59m, -10m) },
		{ "BALNA", (54.383888888888888888888888889m, -7.978888888888888888888888889m) },
		{ "BANBA", (51.952777777777777777777777778m, -6.2391666666666666666666666667m) },
		{ "BAPDA", (53.627777777777777777777777778m, -6.4010277777777777777777777778m) },
		{ "BAPGO", (53.884194444444444444444444444m, -9.041944444444444444444444444m) },
		{ "BARNU", (52.03775m, -8.607888888888888888888888889m) },
		{ "BATED", (53.495277777777777777777777778m, -6.1119444444444444444444444444m) },
		{ "BEDRA", (49m, -15m) },
		{ "BEGAS", (45m, -9m) },
		{ "BEGID", (56.5m, -14m) },
		{ "BEPAN", (52.526722222222222222222222222m, -6.26375m) },
		{ "BERMO", (53.294138888888888888888888889m, -6.4141111111111111111111111111m) },
		{ "BERUS", (63m, -63m) },
		{ "BERUX", (45m, -11m) },
		{ "BEVES", (52.659583333333333333333333333m, -9.014777777777777777777777778m) },
		{ "BEXET", (54m, -14m) },
		{ "BIBLA", (51.135833333333333333333333333m, -8.91m) },
		{ "BILTO", (56.5m, -15m) },
		{ "BIMGO", (49.5m, -14m) },
		{ "BIVDI", (53.183194444444444444444444444m, -6.6682222222222222222222222222m) },
		{ "BOBTU", (44.116666666666666666666666667m, -52.821666666666666666666666667m) },
		{ "BOFUM", (53.537222222222222222222222222m, -5.5m) },
		{ "BOKTO", (56.966666666666666666666666667m, -58m) },
		{ "BOYNE", (53.767111111111111111111111111m, -5.5m) },
		{ "BUDAR", (50.021666666666666666666666667m, -52.003888888888888888888888889m) },
		{ "BUNAV", (46.5m, -8.75m) },
		{ "BUNED", (52.62275m, -6.6300555555555555555555555556m) },
		{ "BUNON", (52.374916666666666666666666667m, -9.543555555555555555555555556m) },
		{ "CARAC", (43m, -60m) },
		{ "CLANE", (53.292777777777777777777777778m, -6.6866666666666666666666666667m) },
		{ "CLAVY", (64.233333333333333333333333333m, -59m) },
		{ "CUDDY", (56.7m, -57m) },
		{ "DEGOS", (54.189166666666666666666666667m, -6.9063888888888888888888888889m) },
		{ "DEMOT", (53.733111111111111111111111111m, -8.120138888888888888888888889m) },
		{ "DERAG", (52.862944444444444444444444444m, -8.580388888888888888888888889m) },
		{ "DEROX", (52.144111111111111111111111111m, -7.1189166666666666666666666667m) },
		{ "DETAX", (53.241861111111111111111111111m, -6.2098888888888888888888888889m) },
		{ "DEVOL", (53.890277777777777777777777778m, -10.434166666666666666666666667m) },
		{ "DEXEN", (53.280277777777777777777777778m, -5.5m) },
		{ "DIGAN", (52.936888888888888888888888889m, -8.197583333333333333333333333m) },
		{ "DIGID", (51.7435m, -8.800527777777777777777777778m) },
		{ "DIMGO", (52.119083333333333333333333333m, -9.820333333333333333333333333m) },
		{ "DIMUS", (52.239722222222222222222222222m, -6.2513888888888888888888888889m) },
		{ "DINIL", (53.673888888888888888888888889m, -6.4569361111111111111111111111m) },
		{ "DINIM", (51m, -15m) },
		{ "DIRUM", (53.002694444444444444444444444m, -6.6611111111111111111111111111m) },
		{ "DISUR", (52.725277777777777777777777778m, -9.098833333333333333333333333m) },
		{ "DIXIS", (45m, -10m) },
		{ "DODIG", (53.962777777777777777777777778m, -6.4927777777777777777777777778m) },
		{ "DOGAL", (54m, -15m) },
		{ "DONEB", (53.320555555555555555555555556m, -6.7233333333333333333333333333m) },
		{ "DORYY", (56.033333333333333333333333333m, -57m) },
		{ "DOVEY", (41.116666666666666666666666667m, -67m) },
		{ "EBABO", (51.64m, -8.714361111111111111111111111m) },
		{ "EDONO", (53.990944444444444444444444444m, -7.706m) },
		{ "EIDER", (52.61625m, -9.106333333333333333333333333m) },
		{ "EKNIS", (52.905166666666666666666666667m, -8.927777777777777777777777778m) },
		{ "EKREN", (53.645277777777777777777777778m, -5.76475m) },
		{ "EKROL", (42m, -15.583333333333333333333333333m) },
		{ "ELBOB", (54.732777777777777777777777778m, -7.7438888888888888888888888889m) },
		{ "ELBON", (53.592805555555555555555555556m, -6.156m) },
		{ "ELKOG", (60.446555555555555555555555556m, -9.5m) },
		{ "ELPOM", (52.560305555555555555555555556m, -9.224111111111111111111111111m) },
		{ "ELSIR", (49.512222222222222222222222222m, -52.003888888888888888888888889m) },
		{ "ELSOX", (51m, -14m) },
		{ "ELTIG", (51.753694444444444444444444444m, -7.835m) },
		{ "EMBOK", (63.466666666666666666666666667m, -58m) },
		{ "EMPER", (49m, -9m) },
		{ "ENDEQ", (53.445555555555555555555555556m, -5.5m) },
		{ "ENNSO", (55.533333333333333333333333333m, -57m) },
		{ "ENOKU", (53.101111111111111111111111111m, -7.6608333333333333333333333333m) },
		{ "ENULA", (53.9725m, -8.264444444444444444444444444m) },
		{ "EPERO", (51.845777777777777777777777778m, -8.262694444444444444444444444m) },
		{ "EPIDU", (53.817638888888888888888888889m, -6.5986111111111111111111111111m) },
		{ "EPMAN", (66m, -60m) },
		{ "EPUNA", (50.5m, -14m) },
		{ "ERABI", (53.014861111111111111111111111m, -9.567583333333333333333333333m) },
		{ "ERAKA", (58m, -10m) },
		{ "ERNAN", (54.278888888888888888888888889m, -7.3927777777777777777777777778m) },
		{ "ERTER", (51.562027777777777777777777778m, -8.060222222222222222222222222m) },
		{ "ERUDA", (53.674722222222222222222222222m, -6.2819444444444444444444444444m) },
		{ "ERVAD", (53.113083333333333333333333333m, -6.0778888888888888888888888889m) },
		{ "ETARI", (55.5m, -15m) },
		{ "ETIKI", (48m, -8.75m) },
		{ "ETILO", (57.5m, -10m) },
		{ "ETSOM", (57.891944444444444444444444444m, -9.5m) },
		{ "EVABU", (62.325m, -44m) },
		{ "EVBAK", (49m, -10m) },
		{ "EVNAL", (57.408527777777777777777777778m, -9.5m) },
		{ "EVRIN", (51.782222222222222222222222222m, -6.5633333333333333333333333333m) },
		{ "FERAH", (53.927666666666666666666666667m, -8.602694444444444444444444444m) },
		{ "FURCA", (54.310583333333333333333333333m, -8.801333333333333333333333333m) },
		{ "GAKBO", (53.810722222222222222222222222m, -8.212166666666666666666666667m) },
		{ "GAMDO", (52.393944444444444444444444444m, -6.9572222222222222222222222222m) },
		{ "GANET", (53.435138888888888888888888889m, -6.5260555555555555555555555556m) },
		{ "GAPLI", (50m, -8m) },
		{ "GARTI", (53.570222222222222222222222222m, -6.3589166666666666666666666667m) },
		{ "GATLO", (52.682861111111111111111111111m, -8.740722222222222222222222222m) },
		{ "GELPO", (48.644166666666666666666666667m, -9.5025m) },
		{ "GERVO", (53.091388888888888888888888889m, -6.5066666666666666666666666667m) },
		{ "GILOG", (52.769444444444444444444444444m, -8.423944444444444444444444444m) },
		{ "GIMRO", (53.652777777777777777777777778m, -5.7486111111111111111111111111m) },
		{ "GINGA", (56.925m, -9.5m) },
		{ "GINGI", (51.899138888888888888888888889m, -8.331527777777777777777777778m) },
		{ "GIPER", (51m, -12m) },
		{ "GIRAS", (53.639166666666666666666666667m, -5.9592222222222222222222222222m) },
		{ "GISTI", (53m, -14m) },
		{ "GIVOL", (52.077888888888888888888888889m, -8.430444444444444444444444444m) },
		{ "GOMUP", (57m, -10m) },
		{ "GONAN", (45m, -14m) },
		{ "GORTO", (52.955277777777777777777777778m, -8.959083333333333333333333333m) },
		{ "GOSDA", (51.707777777777777777777777778m, -8.412388888888888888888888889m) },
		{ "GOSEL", (53.381666666666666666666666667m, -6.6788888888888888888888888889m) },
		{ "GOTEM", (51.823888888888888888888888889m, -7.8200277777777777777777777778m) },
		{ "GRIBS", (61.5m, -63m) },
		{ "GULTU", (52.809944444444444444444444444m, -9.388194444444444444444444444m) },
		{ "GUNSO", (49.052778055555555555555555556m, -11.768333055555555555555555556m) },
		{ "GURGA", (53.115277777777777777777777778m, -6.8333333333333333333333333333m) },
		{ "HESRA", (53.892638888888888888888888889m, -9.055166666666666666666666667m) },
		{ "HIDRA", (44.5m, -13m) },
		{ "HOIST", (55.033333333333333333333333333m, -57m) },
		{ "IB105", (53.340788888888888888888888889m, -6.75435m) },
		{ "IBATU", (54.086666666666666666666666667m, -8.014166666666666666666666667m) },
		{ "IBERG", (49.009166666666666666666666667m, -52.003888888888888888888888889m) },
		{ "IBROD", (56.5m, -10m) },
		{ "IDBAN", (51.846916666666666666666666667m, -8.887111111111111111111111111m) },
		{ "IKMAN", (62.5m, -63m) },
		{ "INDAP", (54.143944444444444444444444444m, -8.032916666666666666666666667m) },
		{ "INKUR", (53.597583333333333333333333333m, -7.3912777777777777777777777778m) },
		{ "INPAT", (52.324055555555555555555555556m, -7.0012222222222222222222222222m) },
		{ "INRAD", (52.258m, -9.150361111111111111111111111m) },
		{ "INSAL", (51.604611111111111111111111111m, -8.551138888888888888888888889m) },
		{ "INTOP", (53.224277777777777777777777778m, -6.109m) },
		{ "IRBIM", (58.653333333333333333333333333m, -60.532611111111111111111111111m) },
		{ "IRDEX", (53.195861111111111111111111111m, -6.0639166666666666666666666667m) },
		{ "IRLOK", (54.533333333333333333333333333m, -57m) },
		{ "JANJO", (54.033333333333333333333333333m, -57m) },
		{ "JAROM", (44.166666666666666666666666667m, -54.883333333333333333333333333m) },
		{ "JEBBY", (43.072222222222222222222222222m, -57.868055555555555555555555556m) },
		{ "JOOPY", (48.506388888888888888888888889m, -52.003888888888888888888888889m) },
		{ "KAGLY", (63.5m, -63m) },
		{ "KANUS", (53.108472222222222222222222222m, -6.4478055555555555555555555556m) },
		{ "KEKEG", (54.016944444444444444444444444m, -9.064694444444444444444444444m) },
		{ "KEKUL", (53.133655555555555555555555556m, -6.8333333333333333333333333333m) },
		{ "KENKI", (65m, -63m) },
		{ "KEPOR", (53.17125m, -6.3668611111111111111111111111m) },
		{ "KERAV", (53.628527777777777777777777778m, -5.7659166666666666666666666667m) },
		{ "KEREX", (52.149527777777777777777777778m, -9.67425m) },
		{ "KESIX", (56.95m, -14m) },
		{ "KETAG", (53.96225m, -8.369277777777777777777777778m) },
		{ "KETLA", (62.466666666666666666666666667m, -58m) },
		{ "KISHA", (53.483805555555555555555555556m, -5.6393333333333333333333333333m) },
		{ "KODIK", (53.466666666666666666666666667m, -57.2m) },
		{ "KOGAD", (49.5m, -15m) },
		{ "KOGAX", (53.571833333333333333333333333m, -5.63725m) },
		{ "KOKIB", (54.5m, -14m) },
		{ "KOMAG", (51.726388888888888888888888889m, -8.615277777777777777777777778m) },
		{ "KOMER", (52.849444444444444444444444444m, -6.8333333333333333333333333333m) },
		{ "KOPAS", (44m, -13m) },
		{ "KOPAX", (53.935666666666666666666666667m, -8.601444444444444444444444444m) },
		{ "KOPES", (51.513888888888888888888888889m, -8.904444444444444444444444444m) },
		{ "KORAK", (53.395m, -7.7930555555555555555555555556m) },
		{ "KOTEX", (51.898861111111111111111111111m, -8.317138888888888888888888889m) },
		{ "KUDAG", (54.005m, -7.9875m) },
		{ "KUDOM", (53.4905m, -5.5539722222222222222222222222m) },
		{ "KUGUR", (55.5m, -10m) },
		{ "KUNUL", (60.55m, -42.633333333333333333333333333m) },
		{ "KURUM", (52.228638888888888888888888889m, -8.664583333333333333333333333m) },
		{ "LANRO", (51.785111111111111111111111111m, -8.709277777777777777777777778m) },
		{ "LAPEX", (47m, -8m) },
		{ "LAPMO", (53.403055555555555555555555556m, -5.9455833333333333333333333333m) },
		{ "LAREM", (52.069277777777777777777777778m, -7.1780555555555555555555555556m) },
		{ "LASMO", (53.970833333333333333333333333m, -8.29475m) },
		{ "LASNO", (48.598333055555555555555555556m, -9m) },
		{ "LAZBE", (54.310111111111111111111111111m, -8.879111111111111111111111111m) },
		{ "LEDGO", (51.24m, -7.5680555555555555555555555556m) },
		{ "LEKVA", (51.5m, -14m) },
		{ "LEMTA", (53.726194444444444444444444444m, -6.0532222222222222222222222222m) },
		{ "LESLU", (51m, -8m) },
		{ "LESRO", (53.989638888888888888888888889m, -8.126111111111111111111111111m) },
		{ "LIBOR", (61.966666666666666666666666667m, -58m) },
		{ "LIFFY", (53.480083333333333333333333333m, -5.5m) },
		{ "LILNO", (51.5925m, -9.22m) },
		{ "LIMRI", (52m, -15m) },
		{ "LINRA", (51.579722222222222222222222222m, -10.032222222222222222222222222m) },
		{ "LIPGO", (53.063916666666666666666666667m, -5.5m) },
		{ "LOBGO", (52.102m, -9.902305555555555555555555556m) },
		{ "LODLA", (51.936111111111111111111111111m, -10.528055555555555555555555556m) },
		{ "LOMSI", (53.1m, -56.783333333333333333333333333m) },
		{ "LORLA", (51.937111111111111111111111111m, -8.197611111111111111111111111m) },
		{ "LULOX", (50.366666666666666666666666667m, -8m) },
		{ "LUNIG", (52.39725m, -8.275972222222222222222222222m) },
		{ "LUPOR", (52.542111111111111111111111111m, -9.702027777777777777777777778m) },
		{ "LUPOV", (42m, -15.083333333333333333333333333m) },
		{ "LUSAT", (53.166666666666666666666666667m, -6.2333333333333333333333333333m) },
		{ "LUSEN", (60.5m, -10m) },
		{ "LUTOV", (55.239444444444444444444444444m, -10m) },
		{ "LUVIS", (51.39m, -9.475277777777777777777777778m) },
		{ "MALAX", (54.028111111111111111111111111m, -8.534833333333333333333333333m) },
		{ "MALOT", (53m, -15m) },
		{ "MAPAG", (51m, -8.5m) },
		{ "MAPOT", (53.861416666666666666666666667m, -9.227472222222222222222222222m) },
		{ "MATIK", (61m, -8.066666944444444444444444444m) },
		{ "MAXAR", (61.466666666666666666666666667m, -58m) },
		{ "MAXEV", (53.409305555555555555555555556m, -6.0548055555555555555555555556m) },
		{ "MAZAN", (52.040527777777777777777777778m, -8.284555555555555555555555556m) },
		{ "MELDI", (52.733333333333333333333333333m, -56.35m) },
		{ "MIBNO", (60.583333333333333333333333333m, -62.533333333333333333333333333m) },
		{ "MIMKU", (56m, -10m) },
		{ "MOATT", (58.025m, -59.928333333333333333333333333m) },
		{ "MOGLO", (55.5m, -14m) },
		{ "MOLAK", (54.613611111111111111111111111m, -9.506388888888888888888888889m) },
		{ "MOMIN", (53.113388888888888888888888889m, -9.392666666666666666666666667m) },
		{ "MOPAT", (51.498611111111111111111111111m, -7.0936111111111111111111111111m) },
		{ "MOPOM", (53.681111111111111111111111111m, -9.313333333333333333333333333m) },
		{ "MORAG", (52.752777777777777777777777778m, -5.5m) },
		{ "MUDOS", (43.5m, -13m) },
		{ "MULLA", (51.894666666666666666666666667m, -8.330333333333333333333333333m) },
		{ "MUSAK", (48.013888888888888888888888889m, -52.003888888888888888888888889m) },
		{ "MUSLO", (60.166666666666666666666666667m, -62m) },
		{ "MUSVA", (64m, -63m) },
		{ "NALDI", (64.5m, -63m) },
		{ "NASBA", (49m, -13m) },
		{ "NASRI", (53.318666666666666666666666667m, -6.5880277777777777777777777778m) },
		{ "NAVAN", (53.747222222222222222222222222m, -6.6463888888888888888888888889m) },
		{ "NAVEM", (53.925555555555555555555555556m, -9.398888888888888888888888889m) },
		{ "NEBIN", (53.5m, -15m) },
		{ "NEEKO", (52.4m, -55.833333333333333333333333333m) },
		{ "NEGEL", (51.946844444444444444444444444m, -8.553722222222222222222222222m) },
		{ "NEKAD", (53.864722222222222222222222222m, -8.480916666666666666666666667m) },
		{ "NEKIL", (53.521277777777777777777777778m, -6.6732222222222222222222222222m) },
		{ "NEMAK", (52.068638888888888888888888889m, -9.7925m) },
		{ "NEPOD", (52.949222222222222222222222222m, -6.1749444444444444444444444444m) },
		{ "NEPOG", (52.815055555555555555555555556m, -8.907333333333333333333333333m) },
		{ "NERTU", (49m, -14m) },
		{ "NESOL", (53.955166666666666666666666667m, -8.290166666666666666666666667m) },
		{ "NETKI", (55m, -14m) },
		{ "NEXAT", (51.938888888888888888888888889m, -6.5755555555555555555555555556m) },
		{ "NIBOG", (55m, -10m) },
		{ "NICSO", (47.506944444444444444444444444m, -52.003888888888888888888888889m) },
		{ "NIFTY", (60.966666666666666666666666667m, -58m) },
		{ "NILAV", (45m, -13.416666666666666666666666667m) },
		{ "NINEX", (58.855555555555555555555555556m, -9.5m) },
		{ "NIPIT", (54.4525m, -8.402777777777777777777777778m) },
		{ "NITIL", (53.466666666666666666666666667m, -6.6319444444444444444444444444m) },
		{ "NONSI", (51.833638888888888888888888889m, -8.111055555555555555555555556m) },
		{ "NORLA", (51.619166666666666666666666667m, -6.8697222222222222222222222222m) },
		{ "ODANU", (49.916666666666666666666666667m, -12.5m) },
		{ "ODLUM", (53.796527777777777777777777778m, -9.061444444444444444444444444m) },
		{ "ODPEX", (59.409916666666666666666666667m, -9.5m) },
		{ "OFCER", (54.248388888888888888888888889m, -8.304277777777777777777777778m) },
		{ "OFMOF", (54.268341666666666666666666667m, -8.420216666666666666666666667m) },
		{ "OGDUM", (54.262833333333333333333333333m, -8.437916666666666666666666667m) },
		{ "OGONO", (52.923638888888888888888888889m, -8.449305555555555555555555556m) },
		{ "OLAPO", (53.780277777777777777777777778m, -7.2946111111111111111111111111m) },
		{ "OLGON", (53.5m, -14m) },
		{ "OLONO", (52.723083333333333333333333333m, -6.779m) },
		{ "OMOKO", (48.838888888888888888888888889m, -12m) },
		{ "OMSAT", (47.006666666666666666666666667m, -52.003888888888888888888888889m) },
		{ "ORTAV", (59.5m, -10m) },
		{ "ORTOM", (51.270805555555555555555555556m, -8.299361111111111111111111111m) },
		{ "ORVEN", (53.664861111111111111111111111m, -6.1916111111111111111111111111m) },
		{ "OSBOX", (56.806388888888888888888888889m, -12.801666666666666666666666667m) },
		{ "OSGAR", (53.049416666666666666666666667m, -7.2702222222222222222222222222m) },
		{ "OSLEX", (53.3655m, -6.6956944444444444444444444444m) },
		{ "OSTED", (62.783333333333333333333333333m, -42m) },
		{ "OTNER", (53.2875m, -6.3075m) },
		{ "PABMO", (52.024361111111111111111111111m, -7.2134444444444444444444444444m) },
		{ "PASAS", (45m, -13m) },
		{ "PEKOK", (53.127583333333333333333333333m, -5.5668888888888888888888888889m) },
		{ "PELIG", (53.199583333333333333333333333m, -7.3333333333333333333333333333m) },
		{ "PELTU", (52.1025m, -55.175555555555555555555555556m) },
		{ "PEPKI", (59.733333333333333333333333333m, -61.616666666666666666666666667m) },
		{ "PERIL", (53.946416666666666666666666667m, -8.507833333333333333333333333m) },
		{ "PESIT", (52.399055555555555555555555556m, -5.7566666666666666666666666667m) },
		{ "PEVAN", (55.783333333333333333333333333m, -11.333333333333333333333333333m) },
		{ "PIDSO", (60.466666666666666666666666667m, -58m) },
		{ "PIGET", (55.833333333333333333333333333m, -12.5m) },
		{ "PIKIL", (56m, -15m) },
		{ "PITAX", (45m, -12m) },
		{ "PODAR", (61.5m, -14.966666666666666666666666667m) },
		{ "PORGY", (56.316666666666666666666666667m, -58.083333333333333333333333333m) },
		{ "PORTI", (46.507777777777777777777777778m, -52.003888888888888888888888889m) },
		{ "PRAWN", (57.203333333333333333333333333m, -59.18m) },
		{ "RADUN", (59.966666666666666666666666667m, -58m) },
		{ "RAFIN", (44.883333333333333333333333333m, -51.805m) },
		{ "RAKUM", (53.930416666666666666666666667m, -8.64625m) },
		{ "RATKA", (49.5m, -8m) },
		{ "RATSU", (61m, -10m) },
		{ "REGHI", (48m, -8m) },
		{ "RELIC", (46.013888888888888888888888889m, -52.003888888888888888888888889m) },
		{ "RERKA", (52.468444444444444444444444444m, -9.106666666666666666666666667m) },
		{ "RESNO", (55m, -15m) },
		{ "RETEN", (43m, -13m) },
		{ "REVNU", (54.466666666666666666666666667m, -10.116666666666666666666666667m) },
		{ "RIKAL", (51.805833333333333333333333333m, -54.545m) },
		{ "RIKUL", (53.057722222222222222222222222m, -8.345777777777777777777777778m) },
		{ "RILED", (52.5m, -14m) },
		{ "RINGI", (51.884913888888888888888888889m, -8.360711111111111111111111111m) },
		{ "RINUS", (53.644166666666666666666666667m, -7.6622222222222222222222222222m) },
		{ "RISAP", (53.440944444444444444444444444m, -6.637m) },
		{ "RIVAK", (46m, -8m) },
		{ "ROBVO", (51.684444444444444444444444444m, -8.19925m) },
		{ "RODEL", (50.5m, -15m) },
		{ "ROKNA", (53.656041666666666666666666667m, -5.8830305555555555555555555556m) },
		{ "RONON", (53.709416666666666666666666667m, -6.6053333333333333333333333333m) },
		{ "ROSRO", (52.805305555555555555555555556m, -8.704277777777777777777777778m) },
		{ "ROTSO", (52.224805555555555555555555556m, -9.314055555555555555555555556m) },
		{ "ROVAL", (51.973722222222222222222222222m, -8.569694444444444444444444444m) },
		{ "RUBAR", (53.135805555555555555555555556m, -5.8015m) },
		{ "RUXIN", (56.281944444444444444444444444m, -12m) },
		{ "SAMON", (51.3225m, -7.4177777777777777777777777778m) },
		{ "SAVRY", (59.466666666666666666666666667m, -58m) },
		{ "SAXAN", (51.485833333333333333333333333m, -53.865277777777777777777777778m) },
		{ "SEPAL", (47m, -8.75m) },
		{ "SINGA", (59.216666666666666666666666667m, -61.083333333333333333333333333m) },
		{ "SITKO", (53.878083333333333333333333333m, -9.089444444444444444444444444m) },
		{ "SIVIR", (46m, -8.75m) },
		{ "SIVNA", (53.197861111111111111111111111m, -5.6410277777777777777777777778m) },
		{ "SLANY", (52.158611111111111111111111111m, -5.8422222222222222222222222222m) },
		{ "SMILO", (51.711027777777777777777777778m, -8.398722222222222222222222222m) },
		{ "SOMAX", (50m, -15m) },
		{ "SOMBO", (52.123m, -9.79325m) },
		{ "SOORY", (38.5075m, -60.268333333333333333333333333m) },
		{ "SORIN", (53.141472222222222222222222222m, -5.80625m) },
		{ "SOSOV", (44.983055555555555555555555556m, -7.885m) },
		{ "SOVED", (56m, -14m) },
		{ "SOVIX", (51.427527777777777777777777778m, -8.562666666666666666666666667m) },
		{ "SUGAD", (53.289583333333333333333333333m, -5.5277222222222222222222222222m) },
		{ "SUNOT", (57m, -15m) },
		{ "SUPRY", (45.5m, -52m) },
		{ "SUROX", (53.996666666666666666666666667m, -6.9934722222222222222222222222m) },
		{ "SUTEX", (52.824361111111111111111111111m, -6.9303611111111111111111111111m) },
		{ "TADEX", (54.856666666666666666666666667m, -8.233611111111111111111111111m) },
		{ "TAKAS", (49m, -8m) },
		{ "TALGO", (44.166666666666666666666666667m, -52.433333333333333333333333333m) },
		{ "TAMEL", (48.728611111111111111111111111m, -10.497222222222222222222222222m) },
		{ "TEDVO", (53.321944444444444444444444444m, -6.0572222222222222222222222222m) },
		{ "TERDU", (52.652055555555555555555555556m, -9.342055555555555555555555556m) },
		{ "TIBGA", (52.390555555555555555555555556m, -5.4513888888888888888888888889m) },
		{ "TIDGO", (53.843888888888888888888888889m, -9.370277777777777777777777778m) },
		{ "TIGPA", (51.976861111111111111111111111m, -8.555944444444444444444444444m) },
		{ "TIPMO", (53.894583333333333333333333333m, -8.951361111111111111111111111m) },
		{ "TIPUR", (52.589166666666666666666666667m, -8.125166666666666666666666667m) },
		{ "TIRUK", (51.997361111111111111111111111m, -8.785m) },
		{ "TISMO", (52.134666666666666666666666667m, -8.013166666666666666666666667m) },
		{ "TIVLU", (46.5m, -8m) },
		{ "TOBOR", (52.5m, -15m) },
		{ "TOBRI", (52.954777777777777777777777778m, -8.697111111111111111111111111m) },
		{ "TOGBO", (52.277472222222222222222222222m, -7.0304722222222222222222222222m) },
		{ "TOMTO", (52.873555555555555555555555556m, -8.151444444444444444444444444m) },
		{ "TOPDA", (53.256944444444444444444444444m, -5.6763888888888888888888888889m) },
		{ "TORLU", (52.987777777777777777777777778m, -7.5830555555555555555555555556m) },
		{ "TOXIT", (58.966666666666666666666666667m, -58m) },
		{ "TUDEP", (51.179166666666666666666666667m, -53.246388888888888888888888889m) },
		{ "TUGSI", (54m, -7.1833333333333333333333333333m) },
		{ "TULSO", (53.199755555555555555555555556m, -5.8351805555555555555555555556m) },
		{ "TULTA", (48.576943888888888888888888889m, -8m) },
		{ "TURLU", (50.076388888888888888888888889m, -8m) },
		{ "TUVEN", (51m, -8.25m) },
		{ "UGNOR", (53.505833333333333333333333333m, -6.6622222222222222222222222222m) },
		{ "ULSIT", (52.869444444444444444444444444m, -8.881944444444444444444444444m) },
		{ "ULTAG", (53.700277777777777777777777778m, -6.7381111111111111111111111111m) },
		{ "UMDAR", (53.63425m, -6.5265277777777777777777777778m) },
		{ "UMESI", (50.8425m, -52.615555555555555555555555556m) },
		{ "UMLER", (47.5m, -8.75m) },
		{ "UMOXA", (47.5m, -8m) },
		{ "UNBEG", (52.805111111111111111111111111m, -9.729944444444444444444444444m) },
		{ "UNLID", (51.209166666666666666666666667m, -10.724722222222222222222222222m) },
		{ "UPLOM", (51.785666666666666666666666667m, -8.689972222222222222222222222m) },
		{ "UPLON", (51.793916666666666666666666667m, -8.644113888888888888888888889m) },
		{ "URTAK", (58.466666666666666666666666667m, -58m) },
		{ "VAPAL", (51.878638888888888888888888889m, -7.82175m) },
		{ "VATRY", (52.554444444444444444444444444m, -5.5m) },
		{ "VENER", (54.5m, -15m) },
		{ "VESMI", (57.966666666666666666666666667m, -58m) },
		{ "XETBO", (52m, -14m) }
	};

	/// <summary>Gets the modified strips and fills in the original strips for any untouched aircraft.</summary>
	public IEnumerable<FlightStrip> Strips
	{
		get => _lastWhazzupStrips.Select(fs => _modifiedStrips.TryGetValue(fs.Callsign, out FlightStrip? mfs) ? mfs : fs);

		set
		{
			foreach (var modStrip in value.Where(fs => _lastWhazzupStrips.Any(ws => fs.Callsign == ws.Callsign && fs != ws)))
				_modifiedStrips[modStrip.Callsign] = modStrip;
		}
	}

	public event EventHandler? StripsUpdated = null;
	private readonly Dictionary<string, FlightStrip> _modifiedStrips = new();
	private readonly WhazzupService _whazzup;
	private readonly HttpClient _httpClient;
	private readonly Task _updater;
	private readonly CancellationTokenSource _killToken;
	private FlightStrip[] _lastWhazzupStrips = Array.Empty<FlightStrip>();
	private Dictionary<char, string[]> _natTracks = new();
	private DateTime _natTracksUpdated = DateTime.MinValue;

	public OccStrips(WhazzupService whazzup, HttpClient httpClient)
	{
		_whazzup = whazzup;
		_httpClient = httpClient;
		_killToken = new CancellationTokenSource();
		_updater = UpdateStripsAsync(_killToken.Token);
	}

	public void ModifyStrip(FlightStrip strip) =>
		_modifiedStrips[strip.Callsign] = strip;

	public void ResetStrip(string callsign) =>
		_modifiedStrips.Remove(callsign);

	private async Task UpdateStripsAsync(CancellationToken token)
	{
		while (!token.IsCancellationRequested)
		{
			if (DateTime.UtcNow - _natTracksUpdated > TimeSpan.FromHours(1))
			{
				_natTracksUpdated = DateTime.UtcNow;
				string pageData = await _httpClient.GetStringAsync(@"https://www.notams.faa.gov/common/nat.html", token);

				for (int cntr = 0; cntr < 3; ++cntr)
					pageData = pageData[pageData.IndexOf("<tr>")..];

				Dictionary<char, string[]> newTracks = new();

				foreach (Match m in TrackRegex().Matches(pageData).Cast<Match>())
					newTracks.Add(m.Groups[1].Value.Single(), m.Value[2..].Split());

				_natTracks.Clear();
				_natTracks = newTracks;
			}

			var feed = await _whazzup.GetFeedAsync();

			if (feed is not null)
			{
				_lastWhazzupStrips =
					feed.Value.Clients.Pilots
					.Where(p =>
						p.FlightPlan.DepartureId?.FirstOrDefault() != p.FlightPlan.ArrivalId?.FirstOrDefault()
					).Select(p =>
						new FlightStrip(
							p.Callsign,
							p.FlightPlan.Aircraft?.IcaoCode ?? "???",
							int.TryParse(p.FlightPlan.Level[1..], out int fl) ? fl : -1,
							decimal.Round(
								p.LastTrack is PilotTrack pt && pt.GroundSpeed > 30
								? pt.GroundSpeed * 0.0015119m
								: char.ToUpper(p.FlightPlan.Speed[0]) switch {
									'N' => int.TryParse(p.FlightPlan.Speed[1..], out int kts) ? kts * 0.0015119m : -1,
									'M' => int.TryParse(p.FlightPlan.Speed[1..], out int mach) ? mach * 0.01m : -1,
									_ => -1
								}, 2)
						) {
							Route = Route.Parse(p.FlightPlan.Route),
							Selcal = SelcalRegex().IsMatch(p.FlightPlan.Remarks) ? SelcalRegex().Match(p.FlightPlan.Remarks).Groups[1].Value : null
						}
					).Where(fs =>
						fs.Route.Any(ft => GetOccFixPosition(ft.Fix) is not null)
					).Select(fs =>
					{
						fs.Track = _natTracks.FirstOrDefault(kvp => OccPosRegex().Replace(fs.Route.ToString(), @"$1/$2").Contains(string.Join(' ', kvp.Value))).Key;

						if (fs.Track == '\0')
							fs.Track = null;

						return fs;
					}).ToArray();

				StripsUpdated?.Invoke(this, new());
			}

			await Task.Delay(TimeSpan.FromSeconds(15), token);
		}
	}

	public string[]? GetNatTrack(char track) =>
		_natTracks.TryGetValue(track, out string[]? retval) ? retval : null;


	public static Time Estimate(PilotTrack lastUpdate, decimal clearedSpeed, (decimal Lat, decimal Lon) fix)
	{
		double speed = lastUpdate.GroundSpeed;
		if (lastUpdate.OnGround)
			speed = (double)(clearedSpeed / 0.0015119m);

		double minsRemaining = Haversine(((double)lastUpdate.Latitude, (double)lastUpdate.Longitude), ((double)fix.Lat, (double)fix.Lon)) / (speed / 60.0);

		int totalMins = lastUpdate.Timestamp.Minute + (lastUpdate.Timestamp.Hour * 60) + (int)minsRemaining;

		return new Time(totalMins / 60 % 24, totalMins % 60);
	}

	private static double Haversine((double Lat, double Lon) from, (double Lat, double Lon) to)
	{
		const double EARTH_RADIUS = 3443.8985; // Nautical Miles
		const double DEG_TO_RAD = Math.PI / 180;

		double dLat = (to.Lat - from.Lat) * DEG_TO_RAD;
		double dLon = (to.Lon - from.Lon) * DEG_TO_RAD;

		double lat1 = from.Lat * DEG_TO_RAD, lat2 = to.Lat * DEG_TO_RAD;

		double a = Math.Pow(Math.Sin(dLat / 2), 2) +
							Math.Pow(Math.Sin(dLon / 2), 2) *
							Math.Cos(lat1) * Math.Cos(lat2);
		return 2 * EARTH_RADIUS * Math.Asin(Math.Sqrt(a));
	}

	public static (decimal Latitude, decimal Longitude)? GetOccFixPosition(string fix)
	{
		if (FIXES.TryGetValue(fix, out var pos))
			return pos;
		else
		{
			Match match = OccPosRegex().Match(fix);
			if (match.Success)
			{
				(decimal lat, decimal lon) retval = (decimal.Parse(match.Groups[1].Value + match.Groups[3].Value), decimal.Parse(match.Groups[2].Value + match.Groups[4].Value));

				if (retval.lat > 90 && retval.lat % 100 == 30)
					retval = ((int)retval.lat / 100 + .5m, retval.lon);

				if (retval.lon > 90 && retval.lon % 100 == 30)
					retval = (retval.lat, (int)retval.lon / 100 + .5m);

				if (retval.lat is >= 0 and < 80 && retval.lon is >= 0 and <= 50)
					return (retval.lat, -retval.lon);
				else
					return null;
			}
			else
				return null;
		}
	}

	public static string FormatFix(string fix)
	{
		Match m = OccPosRegex().Match(fix);

		if (m.Success)
			return $"{decimal.Parse(m.Groups[1].Value + m.Groups[3].Value):00}/{decimal.Parse(m.Groups[2].Value + m.Groups[4].Value):00}";
		else
			return fix;
	}

	public void Dispose()
	{
		try
		{
			_killToken.Cancel();
			_updater.Wait();
		}
		catch (TaskCanceledException) { }

		GC.SuppressFinalize(this);
	}

	[GeneratedRegex(@"\bSEL/([A-Z]{4})\b", RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.CultureInvariant)]
	private static partial Regex SelcalRegex();

	[GeneratedRegex(@"(?:(\d\d(?:[03]0)?)N(0\d\d(?:[03]0)?)W)|(?:(\d\d(?:30)?)/(\d\d(?:30)?))", RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.CultureInvariant)]
	private static partial Regex OccPosRegex();

	[GeneratedRegex(@"^([A-Z])(?: ([^ \r\n]+))+$", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.Multiline)]
	private static partial Regex TrackRegex();
}