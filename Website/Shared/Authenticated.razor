@using System.Web
@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject NavigationManager NavManager
@inject IvaoLoginService LoginSrv
@inject DiscordService Discord
@inject IDbContextFactory<WebsiteContext> WebContextFactory
@inject IvaoApiService Api

@if (authenticatedUser is not null)
{
    @if (authenticatedUser.Roles.HasFlag(DiscordRoles.Administrator) || authenticatedUser.Roles.HasFlag(RequiredRoles))
    {
        @if (Staff is not null && !string.IsNullOrEmpty(authenticatedUser.Staff))
        {
            @Staff(authenticatedUser)
        }
        else if (ChildContent is not null)
        {
            @ChildContent(authenticatedUser)
        }
    }
    else if (Unauthorized is not null)
    {
        @Unauthorized(authenticatedUser)
    }
}
else if (Loading is not null)
{
    @Loading
}

@code {
    [Parameter]
    public RenderFragment<User>? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? Loading { get; set; }

    [Parameter]
    public RenderFragment<User>? Staff { get; set; }

    [Parameter]
    public RenderFragment<User>? Unauthorized { get; set; }

    [Parameter]
    public DiscordRoles RequiredRoles { get; set; } = (DiscordRoles)0;

    User? authenticatedUser = null;
    static Dictionary<string, SemaphoreSlim> _pendingTokens = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        Uri url = new(NavManager.Uri);
        if (!url.Query.Contains("token="))
        {
            authenticatedUser = await LoginSrv.GetAuthenticatedUserAsync();

            if (authenticatedUser is null)
                NavManager.NavigateTo($"https://login.ivao.aero/index.php?url=https%3A%2F%2Fxa.ivao.aero%2Flogin_redirect.php%3Fredir_to%3D{Uri.EscapeDataString(Uri.EscapeDataString(NavManager.Uri))}");

            await InvokeAsync(StateHasChanged);
            return;
        }

        string token = url.Query.Split("token=")[1];

        await LoginSrv.RegisterUserAsync(token);
        authenticatedUser = await LoginSrv.GetAuthenticatedUserAsync();

        if (authenticatedUser is not null)
            await CheckDiscordRoles(authenticatedUser);

        NavManager.NavigateTo(url.GetLeftPart(UriPartial.Path));
        await InvokeAsync(StateHasChanged);
    }

    private async Task CheckDiscordRoles(User authenticatedUser)
    {
        var db = WebContextFactory.CreateDbContext();
        var user = await db.Users.FindAsync(authenticatedUser.Vid);

        if (user is null)
            return;

        if (user.Snowflake is null)
            user.Snowflake = await Discord.RequestSnowflakeAsync("bot-log", user);

        await Discord.EnforceRolesAsync(user, Api);
        await db.SaveChangesAsync();
    }
}
