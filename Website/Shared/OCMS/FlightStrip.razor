@using Website.Data.Ocms
@using Strip = Website.Data.Ocms.FlightStrip
@using Website.Data;

@inject DatalinkService Datalink
@inject WhazzupService Whazzup

<div class="row flightstrip m-2 text-light@((Westbound ? " direction-west" : "") + (Eastbound ? " direction-east" : ""))">
	<button class="btn btn-datalink @(Datalink.IsConnected(Strip.Callsign) ? "connected" : "disconnected") p-0 m-1" type="button" tabindex="-1"></button>
	<div class="row p-0 mx-0 mt-0 mb-1 col">
		<div class="callsign col-4"><a class="text-reset text-decoration-none" href="https://webeye.ivao.aero/?pilotId=@Strip.Callsign" target="_blank" tabindex="-1">@Strip.Callsign</a> <span class="clickable" data-bs-toggle="offcanvas" data-bs-target="#offcanvasFlightstrip" aria-controls="offcanvasFlightstrip" @onclick="() => SetSelected(Strip)">ⓘ</span></div>
		<div class="input-group num-input my-1 col-4 px-0">
			<span class="input-group-text p-1">FL</span>
			@if (DatalinkRequest is null || !Authenticated)
			{
				<input type="number" @bind="Strip.FlightLevel" class="form-control p-1" step="10" disabled="@(!Authenticated)" />
			}
			else
			{
				<input type="number" value="@DatalinkRequest.FlightLevel" class="form-control p-1 @(DatalinkRequest.FlightLevel != Strip.FlightLevel ? "text-bg-warning" : "")" disabled="disabled" />
				<button type="button" @onclick="@(_ => DatalinkReject("FL"))" class="btn btn-danger px-1 py-0">×</button>
			}
		</div>
		<div class="input-group num-input my-1 col-4 px-0">
			<span class="input-group-text p-1">M</span>
			@if (DatalinkRequest is null || !Authenticated)
			{
				<input type="number" @bind="@Strip.Speed" class="form-control p-1" step="0.01" disabled="@(!Authenticated)" />
			}
			else
			{
				<input type="number" value="@DatalinkRequest.MachNumber" class="form-control p-1 @(DatalinkRequest.MachNumber != Strip.Speed ? "text-bg-warning" : "")" step="0.01" disabled="disabled" />
				<button type="button" @onclick="@(_ => DatalinkReject("Mach"))" class="btn btn-danger px-1 py-0">×</button>
			}
		</div>
	</div>

	<div class="row col-8">
		@{
			var fixes = DisplayedFixes.ToArray();
			for (int cntr = 0; cntr < 4; ++cntr)
			{
				if (cntr < fixes.Length)
				{
					(string fix, Time? time, var coords) = fixes[cntr];

					fixNames[cntr] = fix;
					fixTimes[cntr] = time;

					<div class="col-3 my-1 px-0">
						<div class="input-group m-auto">
							<span class="input-group-text p-1" style="width: 4.5em;"><span class="m-auto font-monospace">@OccStrips.FormatFix(fix)</span></span>

							@switch (cntr)
							{
								case 0 when time is null && (!Authenticated || DatalinkRequest is null):
									<input type="text" style="width: 3em;" @bind="time0" placeholder="@OccStrips.Estimate(LastUpdate, Strip.Speed, coords)" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;
								case 0 when Authenticated && DatalinkRequest is not null && DatalinkRequest.Passed.Fix == fix:
									<input type="text" style="width: 3em;" value="@DatalinkRequest.Passed.Time.ToString()" class="form-control p-1 time-input font-monospace @(DatalinkRequest.Passed.Time != fixTimes[0] ? "text-bg-warning" : "")" disabled="disabled" />
									<button type="button" @onclick="@(_ => DatalinkReject("Passing"))" class="btn btn-danger px-1 py-0">×</button>
									break;
								case 0:
									<input type="text" style="width: 3em;" @bind="time0" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;

								case 1 when time is null && (!Authenticated || DatalinkRequest is null || (DatalinkRequest.Passed.Fix != fix && DatalinkRequest.Estimating.Fix != fix)):
									<input type="text" style="width: 3em;" @bind="time1" placeholder="@OccStrips.Estimate(LastUpdate, Strip.Speed, coords)" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;
								case 1 when Authenticated && DatalinkRequest is not null && DatalinkRequest.Passed.Fix == fix:
									<input type="text" style="width: 3em;" value="@DatalinkRequest.Passed.Time.ToString()" class="form-control p-1 time-input font-monospace @(DatalinkRequest.Passed.Time != fixTimes[1] ? "text-bg-warning" : "")" disabled="disabled" />
									<button type="button" @onclick="@(_ => DatalinkReject("Passing"))" class="btn btn-danger px-1 py-0">×</button>
									break;
								case 1 when Authenticated && DatalinkRequest is not null && DatalinkRequest.Estimating.Fix == fix:
									<input type="text" style="width: 3em;" value="@DatalinkRequest.Estimating.Time.ToString()" class="form-control p-1 time-input font-monospace @(DatalinkRequest.Estimating.Time != fixTimes[1] ? "text-bg-warning" : "")" disabled="disabled" />
									<button type="button" @onclick="@(_ => DatalinkReject("Estimating"))" class="btn btn-danger px-1 py-0">×</button>
									break;
								case 1:
									<input type="text" style="width: 3em;" @bind="time1" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;

								case 2 when time is null && (!Authenticated || DatalinkRequest is null || DatalinkRequest.Estimating.Fix != fix):
									<input type="text" style="width: 3em;" @bind="time2" placeholder="@OccStrips.Estimate(LastUpdate, Strip.Speed, coords)" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;
								case 2 when Authenticated && DatalinkRequest is not null && DatalinkRequest.Estimating.Fix == fix:
									<input type="text" style="width: 3em;" value="@DatalinkRequest.Estimating.Time.ToString()" class="form-control p-1 time-input font-monospace @(DatalinkRequest.Estimating.Time != fixTimes[2] ? "text-bg-warning" : "")" disabled="disabled" />
									<button type="button" @onclick="@(_ => DatalinkReject("Estimating"))" class="btn btn-danger px-1 py-0">×</button>
									break;
								case 2:
									<input type="text" style="width: 3em;" @bind="time2" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;

								case 3 when time is null:
									<input type="text" style="width: 3em;" @bind="time3" placeholder="@OccStrips.Estimate(LastUpdate, Strip.Speed, coords)" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;
								case 3:
									<input type="text" style="width: 3em;" @bind="time3" class="form-control p-1 time-input font-monospace" disabled="@(!Authenticated)" />
									break;
							}
							<span class="input-group-text p-1">z</span>
						</div>
					</div>
				}
				else
				{
					<div class="col-3 my-1" />
				}
			}
		}
	</div>

	@if (DatalinkRequest is not null)
	{
		<button class="btn btn-success p-1 m-1 w-auto" @onclick="DatalinkAccept" type="button">✓</button>
	}
</div>

@{
	if (origStrip is not null && Strip != origStrip)
		StripUpdated(Strip);
}

@code {
#pragma warning disable CS8618
	[Parameter]
	public Action<Strip> SetSelected { get; set; }

	[Parameter]
	public Action<Strip> StripUpdated { get; set; }

	[Parameter]
	public PilotTrack? LastUpdate { get; set; }

	[Parameter]
	public Strip Strip { get; set; }

	[Parameter]
	public OccStrips OccStrips { get; set; }
#pragma warning restore CS8618

	[Parameter]
	public bool Authenticated { get; set; } = false;

	public bool Westbound => Strip.Route.Westbound;

	public bool Eastbound => Strip.Route.Eastbound;

	private IEnumerable<(string Fix, Time? Time, (decimal Latitude, decimal Longitude) Coordinates)> DisplayedFixes =>
		Strip.Route.GetDisplayedFixes(LastUpdate, OccStrips);

	#region Hack to make the bindings work
	string[] fixNames = new string[4];
	Time?[] fixTimes = new Time?[4];

	string time0
	{
		get => fixTimes[0]?.ToString() ?? "";

		set
		{
			if (!Authenticated)
				return;

			if (string.IsNullOrWhiteSpace(value))
				Strip.Route.UnsetTime(fixNames[0]);
			else if (Time.TryParse(value, out Time? t))
				Strip.Route.SetTime(fixNames[0], t);
			else
				return;

			StripUpdated.Invoke(Strip);
			_ = InvokeAsync(StateHasChanged);
		}
	}

	string time1
	{
		get => fixTimes[1]?.ToString() ?? "";

		set
		{
			if (!Authenticated)
				return;

			if (string.IsNullOrWhiteSpace(value))
				Strip.Route.UnsetTime(fixNames[1]);
			else if (Time.TryParse(value, out Time? t))
				Strip.Route.SetTime(fixNames[1], t);
			else
				return;

			StripUpdated.Invoke(Strip);
			_ = InvokeAsync(StateHasChanged);
		}
	}

	string time2
	{
		get => fixTimes[2]?.ToString() ?? "";

		set
		{
			if (!Authenticated)
				return;

			if (string.IsNullOrWhiteSpace(value))
				Strip.Route.UnsetTime(fixNames[2]);
			else if (Time.TryParse(value, out Time? t))
				Strip.Route.SetTime(fixNames[2], t);
			else
				return;

			StripUpdated.Invoke(Strip);
			_ = InvokeAsync(StateHasChanged);
		}
	}

	string time3
	{
		get => fixTimes[3]?.ToString() ?? "";

		set
		{
			if (!Authenticated)
				return;

			if (string.IsNullOrWhiteSpace(value))
				Strip.Route.UnsetTime(fixNames[3]);
			else if (Time.TryParse(value, out Time? t))
				Strip.Route.SetTime(fixNames[3], t);
			else
				return;

			StripUpdated.Invoke(Strip);
			_ = InvokeAsync(StateHasChanged);
		}
	}
	#endregion

	public DatalinkUpdateRequest? DatalinkRequest { get; set; } = null;

	private void DatalinkReject(string rejectReason)
	{
		Datalink.Reply(Strip.Callsign, new() { Approved = false, RejectionReason = rejectReason });
		DatalinkRequest = null;
	}

	private void DatalinkAccept()
	{
		Datalink.Reply(Strip.Callsign, new() { Approved = true });
		Strip.FlightLevel = DatalinkRequest!.FlightLevel;
		Strip.Speed = DatalinkRequest.MachNumber;
		Strip.Route.SetTime(DatalinkRequest.Passed.Fix, DatalinkRequest.Passed.Time);
		Strip.Route.SetTime(DatalinkRequest.Estimating.Fix, DatalinkRequest.Estimating.Time);
		DatalinkRequest = null;
	}

	private Strip? origStrip;

	protected override void OnParametersSet()
	{
		origStrip = new(Strip);
		Datalink.UpdateRequested += Datalink_UpdateRequested;
	}

	private void Datalink_UpdateRequested(string callsign, DatalinkUpdateRequest request)
	{
		if (callsign != Strip.Callsign)
			return;

		DatalinkRequest = request;
		_ = InvokeAsync(StateHasChanged);
	}
}