@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject IDbContextFactory<WebsiteContext> ContextFactory

<div class="rounded bg-primary bg-gradient p-4 h-100">
	<table class="table">
		<thead>
			<tr>
				<th scope="col">Event</th>
				<th scope="col">Date</th>
				<th scope="col">Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in _upcoming ?? Array.Empty<ICalendarItem>())
			{
				<tr>
					<th scope="row">@item.Name</th>
					<td>@item.Start.ToString("MM/dd")</td>
					<td>@item.Start.ToString("HH:mm")</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@code {
	IEnumerable<ICalendarItem>? _upcoming = null;

	protected override void OnAfterRender(bool firstRender)
	{
		if (!firstRender)
			return;

		Timer t = new(async _ => await UpdateAsync(), null, 0, 5000);
	}

	async Task UpdateAsync()
	{
		var context = await ContextFactory.CreateDbContextAsync();
		try
		{
			var trainings = context.Exams.Cast<ICalendarItem>().ToArray();
			_upcoming = trainings.Concat(context.Events.Cast<ICalendarItem>().ToArray()).OrderByDescending(i => i.Start);
		}
		catch { }
		await InvokeAsync(StateHasChanged);
	}
}
