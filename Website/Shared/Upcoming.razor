@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject IDbContextFactory<WebsiteContext> ContextFactory

<FullwidthContainer FlexClass="align-items-stretch">
    <ContainerColumn>
        <div class="rounded bg-primary bg-gradient p-4 h-100">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Event</th>
                        <th scope="col">Date</th>
                        <th scope="col">Time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _upcoming ?? Array.Empty<ICalendarItem>())
                    {
                        <tr>
                            <th scope="row">@item.Name</th>
                            <td>@item.Start.ToShortDateString()</td>
                            <td>@item.Start.ToShortTimeString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </ContainerColumn>
    <ContainerColumn>
        <div class="d-flex flex-column justify-content-center align-items-center text-center h-100">
            <span class="oi oi-calendar text-primary display-1" />
            <p class="display-4">What's Next?</p>
        </div>
    </ContainerColumn>
</FullwidthContainer>

@code {
    IEnumerable<ICalendarItem>? _upcoming = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        Timer t = new(async _ => await UpdateAsync(), null, 0, 5000);
    }

    async Task UpdateAsync()
    {
        var context = await ContextFactory.CreateDbContextAsync();
        var trainings = context.Trainings.Cast<ICalendarItem>().ToArray();
        _upcoming = trainings.Concat(context.Events.Cast<ICalendarItem>().ToArray()).OrderByDescending(i => i.Start);
        await InvokeAsync(StateHasChanged);
    }
}
