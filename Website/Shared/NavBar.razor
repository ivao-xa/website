@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject WhazzupService Whazzup
@inject IDbContextFactory<WebsiteContext> ContextFactory

<nav class="navbar navbar-dark bg-dark sticky-top">
	<div class="container">
		<div class="d-flex align-items-center justify-content-between w-100">
			<a class="navbar-brand" href="/"><img src="img/logo_white.svg" title="IVAO XA logo" style="height: 2.5ex;" class="m-1" /></a>
			<Authenticated>
				<div class="d-flex nav flex-md-row flex-column">
					<NavLink class="nav-link" Match="NavLinkMatch.All" href="/">Home</NavLink>
					<NavLink class="nav-link" href="/about">About</NavLink>
					<NavLink class="nav-link" href="/atc">ATC</NavLink>
					<Authenticated Context="_">
						<Staff><NavLink class="nav-link" href="/pilot">Pilot</NavLink></Staff>
					</Authenticated>
					<Authenticated RequiredRoles="DiscordRoles.Training" Context="_">
						<Staff>
							<div class="nav-item dropdown">
								<a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" class="nav-link dropdown-toggle">Training</a>
								<ul class="dropdown-menu dropdown-menu-dark">
									<li><NavLink class="nav-link dropdown-item" href="/training">Trainings</NavLink></li>
									@if (_currentTrainee)
									{
										<li><NavLink class="nav-link dropdown-item" href="/academy">Academy</NavLink></li>
									}
									else
									{
										<li><NavLink class="nav-link dropdown-item" href="/academy/edit">Academy</NavLink></li>
									}

									@if (_currentExams is (Exam, User?)[] exams)
									{
										foreach (var (exam, examinee) in exams)
										{
											<li><NavLink class="nav-link dropdown-item" href="@($"/training/{exam.Id}")">@(examinee?.Name ?? exam.Trainee.ToString()) (@exam.Rating)</NavLink></li>
										}
									}
								</ul>
							</div>
						</Staff>
						<Unauthorized>
							@if (_currentTrainee)
							{
								<NavLink class="nav-link" href="/training/student">Academy</NavLink>
							}
						</Unauthorized>
					</Authenticated>
					@if (_currentEvents is Event[] events)
					{
						<Authenticated RequiredRoles="DiscordRoles.Training" Context="_">
							<Staff>
								<div class="nav-item dropdown">
									<a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" class="nav-link dropdown-toggle">Events</a>
									<ul class="dropdown-menu dropdown-menu-dark">
										@foreach (Event ev in events)
										{
											<li><NavLink class="nav-link dropdown-item" href="@($"/event/edit/{ev.Id}")">@ev.Name</NavLink></li>
										}
									</ul>
								</div>
							</Staff>
						</Authenticated>
					}
					<Authenticated RequiredRoles="DiscordRoles.Administrator" Context="_">
						<NavLink class="nav-link" href="/discord">Discord</NavLink>
					</Authenticated>
				</div>
				<div>
					<span class="text-secondary">@(_currentGreeting), <a href="https://ivao.aero/Member.aspx?ID=@context.Vid" target="_blank">@context.Name</a>!</span>
					@{
						_currentUser = context;
					}
					@if (_currentController is not null)
					{
						<button type="button" class="btn btn-primary btn-sm ms-2" data-bs-toggle="modal" data-bs-target="#controllerProcedureModal">@(_currentController.Value.Callsign)</button>
					}
				</div>
			</Authenticated>
		</div>
	</div>
</nav>

@if (_currentController is ATC context)
{
	<div class="modal fade" id="controllerProcedureModal" aria-hidden="true" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">
						You are currently controlling @(context.Atis is not null && context.Atis.Value.Lines.Length > 1 ? context.Atis.Value.Lines[1] : context.Callsign)
					</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>Here are the relevant procedures for your position:</p>
					<div class="d-flex flex-column">
						@if (context.Callsign[1] != 'Z' && context.Callsign[0] == 'K')
						{
							<a href="http://airnav.com/airport/@(context.Callsign.Split('_')[0])" target="_blank">AirNav</a>
						}

						@foreach (Document doc in _currentDocuments ?? Array.Empty<Document>())
						{
							<a href="@doc.Path" target="_blank">@doc.Name</a>
						}
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private readonly string[] _greetings = new[]
	{
		"Hello", "Greetings", "Good day", "Salutations", "Howdy", "Hey", "How's it going", "What's up", "Blue skies"
	};

	string _currentGreeting = "";
	bool _currentTrainee = false;

	ATC? _currentController = null;
	User? _currentUser = null;
	Document[]? _currentDocuments = null;
	Event[]? _currentEvents = null;
	(Exam, User?)[]? _currentExams = null;

	protected override void OnInitialized() => _currentGreeting = _greetings[System.Random.Shared.Next(_greetings.Length)];

	protected override void OnAfterRender(bool firstRender)
	{
		if (!firstRender)
			return;

		Timer t = new(async _ => await UpdateAsync(), null, 0, 5000);
	}

	async Task UpdateAsync()
	{
		if (_currentUser is null)
			return;

		var context = await ContextFactory.CreateDbContextAsync();

		_currentController = (await Whazzup.GetFeedAsync())?.Clients.Atcs.Select(a => (ATC?)a).FirstOrDefault(a => a?.UserId == _currentUser.Vid);
		if (_currentController is not null)
		{
			var tmp = context.Documents.AsNoTracking().ToArray();
			_currentDocuments = tmp.Where(d => d.Positions.Split(':').Contains(_currentController.Value.Callsign.Split('_')[0])).ToArray();
		}

		_currentTrainee = context.TrainingRequests.Any(tr => tr.Trainee == _currentUser.Vid);
		_currentEvents = context.Events.ToArray();
		_currentExams = context.Exams.Where(ex => ex.Trainer == _currentUser.Vid).ToArray().Select(ex => (ex, context.Users.Find(ex.Trainer))).ToArray();

		await InvokeAsync(StateHasChanged);
	}
}