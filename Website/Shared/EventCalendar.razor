@using Microsoft.EntityFrameworkCore
@using Website.Data
@inject IDbContextFactory<WebsiteContext> ContextFactory

<table class="table">
	<thead>
		<tr>
			<th scope="col">Position</th>
			@for (int hour = 0; hour < (Event.End - Event.Start).TotalHours; ++hour)
			{
				int startHour = Event.Start.AddHours(hour).Hour;
				<th scope="col" class="text-center">@startHour&ndash;@(startHour + 1)</th>
			}
		</tr>
	</thead>
	<tbody>
		@foreach (string position in Event.Positions)
		{
			<tr>
				<th scope="row">@position</th>
				@for (int hour = 0; hour < (Event.End - Event.Start).TotalHours; ++hour)
				{
					DateTime timeBlock = Event.Start.AddHours(hour);
					string posCache = position + "";
					var dbContext = ContextFactory.CreateDbContext();
					var allSignups = Event.Signups(dbContext).Where(su => su.Position == posCache && su.Time == timeBlock).AsNoTracking().ToArray();

					<td>
						<Authenticated RequiredRoles="DiscordRoles.Events">
							<Staff>
								<div class="d-flex flex-column">
									@foreach (EventSignup signup in allSignups)
									{
										var controller = dbContext.Users.Find(signup.Controller)!;

										<div class="@GetRatingClass(controller.RatingAtc ?? AtcRating.AS1) rounded p-1 text-center">
											<div class="col"><abbr title="@controller.Vid">@controller.Name</abbr></div>
											<div class="col">
												<img src="https://ivao.aero/data/images/ratings/atc/@((int)controller.RatingAtc!.Value).gif" title="@controller.RatingAtc" />
											</div>
										</div>
									}
									@{
										string blobId = posCache + hour;
									}

									<div class="form-check text-center">
										<input type="checkbox"
											   checked="@allSignups.Any(su => su.Controller == context.Vid)"
										@oninput="e => SignUpAsync(dbContext, e, context.Vid, timeBlock, posCache)"
											   id="@blobId"
											   class="form-check-input" />
										<label class="form-check-label" for="@blobId">@context.Name (You)</label>
									</div>
								</div>
							</Staff>
							<Unauthorized>
								<div class="form-check">
									<input type="checkbox"
										   checked="@allSignups.Any(su => su.Controller == context.Vid)"
									@oninput="e => SignUpAsync(dbContext, e, context.Vid, timeBlock, posCache)"
										   class="form-check-input" />
								</div>
							</Unauthorized>
						</Authenticated>
					</td>
				}
			</tr>
		}
	</tbody>
</table>

@code {
#pragma warning disable CS8618
	[Parameter]
	public Event Event { get; set; }
#pragma warning restore CS8618

	private async Task SignUpAsync(WebsiteContext context, ChangeEventArgs e, int vid, DateTime time, string position)
	{
		if (context.Events.Find(Event.Id) is not Event ev)
			return;

		EventSignup signup = new() { Controller = vid, Time = time, Position = position };

		if (bool.TryParse(e.Value?.ToString() ?? "false", out bool signingUp) && signingUp)
			ev.AddOrUpdateSignup(context, signup);
		else
			ev.RemoveSignup(context, signup);

		Event = ev;
		await context.SaveChangesAsync();
		await InvokeAsync(StateHasChanged);
	}

	private string GetRatingClass(AtcRating rating) =>
		"text-bg-" + rating switch {
			AtcRating.AS1 or AtcRating.AS2 or AtcRating.AS3 => "white",
			AtcRating.ADC => "secondary",
			AtcRating.APC => "warning",
			_ => "success"
		};
}